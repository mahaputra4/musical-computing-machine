#include <CoreGraphics/CoreGraphics.h>
#include <stdio.h>

ScreenInit(int argc, char** argv) {
    int bitsPerSample = 8;
    CGDisplayCount displayCount;
    CGDirectDisplayID displays[32];
    CGDisplayModeRef newMode;

    /* Grab the active displays */
    CGGetActiveDisplayList(32, displays, &displayCount);
    for (int i = 0; i < displayCount; i++) {
        CGRect bounds = CGDisplayBounds(displays[i]);
        printf("Found %s display %d at (%d,%d) with resolution %dx%d\n", 
               (CGDisplayIsMain(displays[i]) ? "primary" : "secondary"), i,
               (int)bounds.origin.x, (int)bounds.origin.y,
               (int)bounds.size.width, (int)bounds.size.height);
    }

    if (displayNumber < 0) {
        printf("Using primary display as default\n");
        displayID = CGMainDisplayID();
    } else if (displayNumber < displayCount) {
        printf("Using specified display %d\n", displayNumber);
        displayID = displays[displayNumber];
    } else {
        fprintf(stderr, "Specified display %d does not exist\n", displayNumber);
        return FALSE;
    }

    /* Set new display mode */
    newMode = CGDisplayCopyDisplayMode(displayID);
    if (!newMode) {
        fprintf(stderr, "Failed to get display mode\n");
        return FALSE;
    }

    printf("Setting new resolution: 1280x720\n");
    CGDisplayModeRef mode720p = CGDisplayCopyAllDisplayModes(displayID, NULL)[0]; // Simplified example
    if (CGDisplaySetDisplayMode(displayID, mode720p, NULL) != kCGErrorSuccess) {
        fprintf(stderr, "Failed to set resolution\n");
        return FALSE;
    }

    CGDisplayModeRelease(newMode);
    return TRUE;
}
